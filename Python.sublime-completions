{
    "scope": "source.python",

    "completions":
    [
        // One letter
        { "trigger": "c", "contents": "cls" },
        { "trigger": "d", "contents": "\"\"\"\n${1:Documentation}\n\"\"\"" },
        { "trigger": "F", "contents": "False" },
        { "trigger": "f", "contents": "from ${1:datetime} import ${2:datetime, timedelta}" },
        { "trigger": "i", "contents": "import ${1:math}" },
        { "trigger": "N", "contents": "None" },
        { "trigger": "p", "contents": "print($0)" },
        { "trigger": "r", "contents": "return ${1:True}" },
        { "trigger": "s", "contents": "self" },
        { "trigger": "T", "contents": "True" },

        // Two letters
        { "trigger": "pa", "contents": "pass" },
        { "trigger": "wi", "contents": "with ${1:open()}:" },
        { "trigger": "ra", "contents": "raise ${1:AssertionError()}" },

        // Three letters
        { "trigger": "ddd", "contents": "decode('utf-8')" },
        { "trigger": "eee", "contents": "encode('utf-8')" },

        // File headers
        { "trigger": "hashbang", "contents": "#!/usr/bin/env python\n" },
        { "trigger": "utf8", "contents": "# coding=utf-8\n" },

        // Features
        { "trigger": "__all", "contents": "__all__ = ('$0',)" },
        { "trigger": "super", "contents": "super(${1:Class}, self).${2:__init__}()" },
        { "trigger": "superc", "contents": "super(${1:Class}, cls).${2:setUpClass}()" },

        // Methods
        { "trigger": "defc", "contents": "@classmethod\ndef ${1:method}(cls):\n    pass" },
        { "trigger": "defp", "contents": "@property\ndef ${1:method}(self):\n    return self._value" },
        { "trigger": "deft", "contents": "@staticmethod\ndef ${1:method}():\n    return True" },
        { "trigger": "defsuper", "contents": "def ${1:method_name}(self, *args, **kwargs):\n    return super(${3:Class}, self).${1:method_name}(*args, **kwargs)" },
        { "trigger": "defcsuper", "contents": "@classmethod\ndef ${1:method_name}(cls, *args, **kwargs):\n    return super(${3:Class}, cls).${1:method_name}(*args, **kwargs)" },
        { "trigger": "definit", "contents": "def __init__(self, ${1:arg}):\n    self.${1:arg} = ${1:arg}\n" },
        { "trigger": "definitsuper", "contents": "def __init__(self, *args, **kwargs):\n    super(${1:Class}, self).__init__(*args, **kwargs)\n" },
        { "trigger": "defs__", "contents": "def __${1:str}__(self):\n    return ${2:\"\"}\n" },
        { "trigger": "deftest", "contents": "def test_${1:something}(self):\n    ${2:pass}\n" },
        { "trigger": "defstest", "contents": "def test_${1:something}(self):\n    ${2:pass}\n" },

        // Debugging
        { "trigger": "pdb", "contents": "import pdb; pdb.set_trace()" },
        { "trigger": "ipdb", "contents": "import ipdb; ipdb.set_trace()" },
        { "trigger": "ipython", "contents": "import IPython; IPython.embed()" },

        // Logging
        { "trigger": "log", "contents": "logger.${2:info}($1)" },
        { "trigger": "logger", "contents": "logger = logging.getLogger(__name__)" },

        // unittest
        { "trigger": "aE", "contents": "self.assertEqual(${1:actual}, ${2:expected})" },
        { "trigger": "aNE", "contents": "self.assertNotEqual(${1:a}, ${2:b})" },
        { "trigger": "aG", "contents": "self.assertGreater(${1:a}, ${2:b})" },
        { "trigger": "aGE", "contents": "self.assertGreaterEqual(${1:a}, ${2:b})" },
        { "trigger": "aL", "contents": "self.assertLess(${1:a}, ${2:b})" },
        { "trigger": "aLE", "contents": "self.assertLessEqual(${1:a}, ${2:b})" },
        { "trigger": "aI", "contents": "self.assertIn(${1:item}, ${2:container})" },
        { "trigger": "aNI", "contents": "self.assertNotIn(${1:item}, ${2:container})" },
        { "trigger": "aF", "contents": "self.assertFalse(${1:thing})" },
        { "trigger": "aT", "contents": "self.assertTrue(${1:thing})" },
        { "trigger": "aIN", "contents": "self.assertIsNone(${1:item})" },
        { "trigger": "aINN", "contents": "self.assertIsNotNone(${1:item})" },
        { "trigger": "aR", "contents": "with self.assertRaises(${1:AssertionError}):\n    ${2:statement}" },
        { "trigger": "defsetup", "contents": "def setUp(self):\n    super(${1:Class}, self).setUp()"},
        { "trigger": "defteardown", "contents": "def tearDown(self):\n    super(${1:Class}, self).tearDown()"},
        { "trigger": "defsetupclass", "contents": "@classmethod\ndef setUpClass(cls):\n    super(${1:Class}, cls).setUpClass()"},
        { "trigger": "defteardownclass", "contents": "@classmethod\ndef tearDownClass(cls):\n    super(${1:Class}, cls).tearDownClass()"},
        { "trigger": "ssetup", "contents": "super(${1:Class}, self).setUp()" },
        { "trigger": "ssetupc", "contents": "super(${1:Class}, cls).setUpClass()" },
        { "trigger": "steardown", "contents": "super(${1:Class}, self).tearDown()" },
        { "trigger": "steardownc", "contents": "super(${1:Class}, cls).tearDownClass()" },

        // Imports
        { "trigger": "idatetime", "contents": "import datetime as dt" },
        { "trigger": "idecimal", "contents": "from decimal import Decimal" },
        { "trigger": "ifraction", "contents": "from fraction import Fraction" },
        { "trigger": "inumpy", "contents": "import numpy as np" },
        { "trigger": "ipandas", "contents": "import pandas as pd" },
        { "trigger": "ipath", "contents": "from pathlib import Path" },
        { "trigger": "ipprint", "contents": "from pprint import pprint" },
        { "trigger": "ipyplot", "contents": "import matplotlib.pyplot as plt" },
        { "trigger": "ipython", "contents": "import IPython; IPython.embed()" },
        { "trigger": "mmmodule_dir", "contents": "MODULE_DIR = os.path.dirname(__file__)" },
        { "trigger": "mmmmodule_dir", "contents": "MODULE_DIR = Path(__file__).parent.resolve()" },

        // Templates
        { "trigger": "ffheader", "contents": "# -*- coding:utf-8 -*-\nfrom __future__ import (absolute_import, division, print_function,\n                        unicode_literals)"},
        { "trigger": "ttscript", "contents": "#!/usr/bin/env python\n\ndef main():\n    ${1:code}\n\nif __name__ == '__main__':\n    main()" },
        { "trigger": "ttunitest", "contents": "import unittest\n\n\nclass ${1:My}Tests(unittest.TestCase):\n    def test_${2:something}(self):\n        ${3:pass}\n\n\nif __name__ == '__main__':\n    unittest.main()" },

        // Coverage
        { "trigger": "nocover", "contents": "# pragma: no cover"},

        // Django
        { "trigger": "iapps", "contents": "from django.apps import apps" },
        { "trigger": "iatomic", "contents": "from django.db.transaction import atomic" },
        { "trigger": "icache", "contents": "from django.core.cache import cache" },
        { "trigger": "icached_property", "contents": "from django.utils.functional import cached_property" },
        { "trigger": "icall_command", "contents": "from django.core.management import call_command" },
        { "trigger": "iconnections", "contents": "from django.db import connections" },
        { "trigger": "ireverse", "contents": "from django.urls import reverse" },
        { "trigger": "imodels", "contents": "from django.db import models" },
        { "trigger": "isettings", "contents": "from django.conf import settings" },
        { "trigger": "idjsix", "contents": "from django.utils import six" },
        { "trigger": "ioverride_settings", "contents": "from django.test.utils import override_settings" },
        { "trigger": "itimezone", "contents": "from django.utils import timezone" },
        { "trigger": "ivalidationerror", "contents": "from django.core.exceptions import ValidationError" },
        { "trigger": "withcursor", "contents": "with connection.cursor() as cursor:\n    " },
        { "trigger": "defsetuptestdata", "contents": "@classmethod\ndef setUpTestData(cls):\n    ${0:super(Class, cls).setUpTestData()}"},
        { "trigger": "ssetuptd", "contents": "super(${1:Class}, cls).setUpTestData()" },
        { "trigger": "DNE", "contents": "DoesNotExist"}

    ]
}
