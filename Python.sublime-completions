{
    "scope": "source.python",

    "completions":
    [
        // One letter
        { "trigger": "F", "contents": "False" },
        { "trigger": "N", "contents": "None" },
        { "trigger": "s", "contents": "self" },
        { "trigger": "T", "contents": "True" },

        // File headers
        { "trigger": "hashbang", "contents": "#!/usr/bin/env python\n" },

        // Methods
        { "trigger": "defc", "contents": "@classmethod\ndef ${1:method}(cls):\n    pass" },
        { "trigger": "defp", "contents": "@property\ndef ${1:method}(self):\n    return self._value" },
        { "trigger": "deft", "contents": "@staticmethod\ndef ${1:method}():\n    return True" },
        { "trigger": "defsuper", "contents": "def ${1:method_name}(self, *args, **kwargs):\n    return super(${3:Class}, self).${1:method_name}(*args, **kwargs)" },
        { "trigger": "defcsuper", "contents": "@classmethod\ndef ${1:method_name}(cls, *args, **kwargs):\n    return super(${3:Class}, cls).${1:method_name}(*args, **kwargs)" },
        { "trigger": "definit", "contents": "def __init__(self, ${1:arg}):\n    self.${1:arg} = ${1:arg}\n" },
        { "trigger": "definitsuper", "contents": "def __init__(self, *args, **kwargs):\n    super(${1:Class}, self).__init__(*args, **kwargs)\n" },
        { "trigger": "defs__", "contents": "def __${1:str}__(self):\n    return ${2:\"\"}\n" },
        { "trigger": "deftest", "contents": "def test_${1:something}(self):\n    ${2:pass}\n" },
        { "trigger": "defstest", "contents": "def test_${1:something}(self):\n    ${2:pass}\n" },

        // Debugging
        { "trigger": "bp", "contents": "breakpoint()" },
        { "trigger": "pdb", "contents": "import pdb; pdb.set_trace()" },
        { "trigger": "ipdb", "contents": "import ipdb; ipdb.set_trace()" },
        { "trigger": "ipython", "contents": "import IPython; IPython.embed()" },

        // Imports
        { "trigger": "idatetime", "contents": "import datetime as dt" },
        { "trigger": "idecimal", "contents": "from decimal import Decimal" },
        { "trigger": "ifraction", "contents": "from fraction import Fraction" },
        { "trigger": "inumpy", "contents": "import numpy as np" },
        { "trigger": "ipandas", "contents": "import pandas as pd" },
        { "trigger": "ipath", "contents": "from pathlib import Path" },
        { "trigger": "ipprint", "contents": "from pprint import pprint" },
        { "trigger": "ipyplot", "contents": "import matplotlib.pyplot as plt" },
        { "trigger": "ipython", "contents": "import IPython; IPython.embed()" },
        { "trigger": "mmmodule_dir", "contents": "MODULE_DIR = os.path.dirname(__file__)" },
        { "trigger": "mmmmodule_dir", "contents": "MODULE_DIR = Path(__file__).parent.resolve()" },

        // Django
        { "trigger": "iapps", "contents": "from django.apps import apps" },
        { "trigger": "icache", "contents": "from django.core.cache import cache" },
        { "trigger": "icached_property", "contents": "from django.utils.functional import cached_property" },
        { "trigger": "icall_command", "contents": "from django.core.management import call_command" },
        { "trigger": "iconnections", "contents": "from django.db import connections" },
        { "trigger": "ireverse", "contents": "from django.urls import reverse" },
        { "trigger": "imodels", "contents": "from django.db import models" },
        { "trigger": "isettings", "contents": "from django.conf import settings" },
        { "trigger": "idjsix", "contents": "from django.utils import six" },
        { "trigger": "ioverride_settings", "contents": "from django.test.utils import override_settings" },
        { "trigger": "itimezone", "contents": "from django.utils import timezone" },
        { "trigger": "ivalidationerror", "contents": "from django.core.exceptions import ValidationError" },
        { "trigger": "withcursor", "contents": "with connection.cursor() as cursor:\n    " },

    ]
}
